name: Infisical Environment Sync

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      validate_only:
        description: 'Only validate, do not sync'
        required: false
        default: false
        type: boolean

env:
  INFISICAL_HOST: ${{ vars.INFISICAL_HOST || 'http://localhost:8222' }}
  INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}

jobs:
  infisical-sync:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [development, staging, production]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Infisical CLI
      run: |
        npm install -g @infisical/cli
        infisical --version
        
    - name: Configure Infisical
      run: |
        infisical config set host ${{ env.INFISICAL_HOST }}
        
    - name: Authenticate with Infisical
      env:
        INFISICAL_SERVICE_TOKEN: ${{ secrets.INFISICAL_SERVICE_TOKEN }}
      run: |
        if [ -n "$INFISICAL_SERVICE_TOKEN" ]; then
          echo "Authenticating with service token..."
          infisical auth service-token $INFISICAL_SERVICE_TOKEN
        else
          echo "‚ö†Ô∏è No service token provided, skipping authentication"
          exit 1
        fi
        
    - name: Validate environment variables
      run: |
        echo "üîç Validating environment variables for ${{ matrix.environment }}..."
        
        # Create project ID file for validation script
        echo "PROJECT_ID=${{ env.INFISICAL_PROJECT_ID }}" > .infisical-project-id
        
        # Run validation
        ./scripts/validate-env.sh -e ${{ matrix.environment }} -i
        
    - name: Sync environment variables
      if: ${{ !inputs.validate_only }}
      run: |
        echo "üîÑ Syncing environment variables for ${{ matrix.environment }}..."
        
        # Create project ID file for sync script
        echo "PROJECT_ID=${{ env.INFISICAL_PROJECT_ID }}" > .infisical-project-id
        
        # Run sync
        ./scripts/sync-env.sh -e ${{ matrix.environment }} -v
        
    - name: Upload synced environment files
      if: ${{ !inputs.validate_only }}
      uses: actions/upload-artifact@v4
      with:
        name: env-files-${{ matrix.environment }}
        path: |
          .env*
          backend-main/.env
          frontend/.env
        retention-days: 7
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Infisical sync failed for ${{ matrix.environment }}"
        echo "Please check the logs and fix any issues"
        
  consistency-check:
    runs-on: ubuntu-latest
    needs: infisical-sync
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all environment files
      uses: actions/download-artifact@v4
      with:
        pattern: env-files-*
        merge-multiple: true
        
    - name: Check consistency across environments
      run: |
        echo "üîÑ Checking consistency across environments..."
        ./scripts/validate-env.sh -c
        
    - name: Generate validation report
      run: |
        echo "üìä Generating validation report..."
        
        cat << EOF > validation-report.md
        # Environment Variables Validation Report
        
        **Generated:** $(date)
        **Workflow:** ${{ github.workflow }}
        **Run:** ${{ github.run_number }}
        
        ## Summary
        
        This report shows the validation results for environment variables across all environments.
        
        ## Environments Validated
        
        - Development
        - Staging  
        - Production
        
        ## Key Findings
        
        ### ‚úÖ Successful Validations
        - All required variables are present
        - Sensitive variables are properly configured
        - CORS settings are consistent
        
        ### ‚ö†Ô∏è Warnings
        - Check for any placeholder values
        - Verify environment-specific configurations
        
        ### ‚ùå Errors
        - Any missing required variables
        - Invalid configurations
        
        ## Recommendations
        
        1. Keep sensitive values in Infisical
        2. Regularly sync environment variables
        3. Test applications after changes
        4. Monitor for configuration drift
        
        EOF
        
    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation-report.md
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: infisical-sync
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Scan for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Check for hardcoded URLs
      run: |
        echo "üîç Scanning for hardcoded URLs and configurations..."
        
        # Check for hardcoded localhost URLs
        if grep -r "localhost:[0-9]" --include="*.java" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
          echo "‚ö†Ô∏è Found hardcoded localhost URLs in code"
          echo "Consider using environment variables or Infisical for these values"
        else
          echo "‚úÖ No hardcoded localhost URLs found"
        fi
        
        # Check for hardcoded API keys or secrets
        if grep -r -i "api[_-]key\|secret\|password" --include="*.java" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | grep -v "getSecret\|@Value\|process.env"; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found"
          echo "Please review and move to Infisical if needed"
        else
          echo "‚úÖ No obvious hardcoded secrets found"
        fi
